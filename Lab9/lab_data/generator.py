import hashlib
import struct

dump40 = [
    0xDF, 0x8E, 0xCF, 0xDF, 0xFE, 0x76, 0x7C, 0xFE, 0xFC, 0xED, 0xF8, 0xFC, 0xF9, 0xDB, 0xF1, 0xF9,
    0xF2, 0xB7, 0xE3, 0xF3, 0xBF, 0x1D, 0x9F, 0xBF, 0x7F, 0x3B, 0x3E, 0x7F, 0xE5, 0x6F, 0xC7, 0xE7,
    0xCB, 0xDF, 0x8E, 0xCF, 0x5F, 0xFE, 0x76, 0x7C, 0xBE, 0xFC, 0xED, 0xF8, 0x97, 0xBF, 0x1D, 0x9F,
    0x2F, 0x7F, 0x3B, 0x3E, 0xE0, 0xCB, 0xDF, 0x8E, 0xC1, 0x97, 0xBF, 0x1D, 0xF0, 0xE5, 0x6F, 0xC7,
    0x7C, 0xF9, 0xDB, 0xF1, 0xF8, 0xF2, 0xB7, 0xE3, 0x82, 0x2F, 0x7F, 0x3B, 0x05, 0x5F, 0xFE, 0x76,
    0x56, 0xC1, 0x97, 0xBF, 0x55, 0xF0, 0xE5, 0x6F, 0x15, 0x7C, 0xF9, 0xDB, 0x2A, 0xF8, 0xF2, 0xB7,
    0xAB, 0xE0, 0xCB, 0xDF, 0x0A, 0xBE, 0xFC, 0xED, 0x61, 0x15, 0x7C, 0xF9, 0xC3, 0x2A, 0xF8, 0xF2,
    0x86, 0x55, 0xF0, 0xE5, 0xAC, 0x82, 0x2F, 0x7F, 0x58, 0x05, 0x5F, 0xFE, 0xB0, 0x0A, 0xBE, 0xFC,
    0x0C, 0xAB, 0xE0, 0xCB, 0x19, 0x56, 0xC1, 0x97, 0x32, 0xAC, 0x82, 0x2F, 0x65, 0x58, 0x05, 0x5F,
    0x97, 0x61, 0x15, 0x7C, 0x2E, 0xC3, 0x2A, 0xF8, 0x5C, 0x86, 0x55, 0xF0, 0xB9, 0x0C, 0xAB, 0xE0,
    0x73, 0x19, 0x56, 0xC1, 0xE7, 0x32, 0xAC, 0x82, 0xCB, 0xB0, 0x0A, 0xBE, 0xCE, 0x65, 0x58, 0x05,
    0x9C, 0xCB, 0xB0, 0x0A, 0x72, 0x2E, 0xC3, 0x2A, 0x39, 0x97, 0x61, 0x15, 0xE4, 0x5C, 0x86, 0x55,
    0xC8, 0xB9, 0x0C, 0xAB, 0x23, 0xE7, 0x32, 0xAC, 0x46, 0xCE, 0x65, 0x58, 0x8D, 0x9C, 0xCB, 0xB0,
    0x1B, 0x39, 0x97, 0x61, 0x36, 0x72, 0x2E, 0xC3, 0x6C, 0xE4, 0x5C, 0x86, 0xD9, 0xC8, 0xB9, 0x0C,
    0x91, 0x73, 0x19, 0x56, 0xCB, 0x46, 0xCE, 0x65, 0x96, 0x8D, 0x9C, 0xCB, 0xB2, 0x91, 0x73, 0x19,
    0x65, 0x23, 0xE7, 0x32, 0x2C, 0x1B, 0x39, 0x97, 0x59, 0x36, 0x72, 0x2E, 0xB3, 0x6C, 0xE4, 0x5C
]

dump41 = [
    0xF5, 0xE7, 0x10, 0xAE, 0xB6, 0xFF, 0x87, 0x70, 0x6D, 0xFF, 0x0F, 0xE1, 0xDF, 0xDE, 0x1F, 0x42,
    0xBF, 0xBD, 0x3F, 0x84, 0xEF, 0xEF, 0x21, 0xDC, 0xDB, 0xFF, 0x43, 0x38, 0x7B, 0x5B, 0x7F, 0x88,
    0xF3, 0x96, 0xFE, 0x90, 0x82, 0x57, 0xF4, 0x07, 0x04, 0xAF, 0xE8, 0x0F, 0xE3, 0x0D, 0xFD, 0xA1,
    0xC3, 0x3B, 0xFA, 0xC3, 0x4F, 0xF0, 0x8A, 0xFE, 0x9B, 0xC0, 0x15, 0x7D, 0x27, 0x78, 0x45, 0x7F,
    0x09, 0x5E, 0xD1, 0x1F, 0x13, 0xBC, 0xA2, 0x3F, 0x36, 0x81, 0x2B, 0xFA, 0x68, 0x22, 0x57, 0x74,
    0x45, 0x5A, 0xCA, 0x15, 0x93, 0x86, 0x72, 0xC5, 0xA5, 0xA9, 0x5C, 0x51, 0x4B, 0x53, 0xB9, 0xA2,
    0x22, 0x2D, 0xE5, 0x0A, 0xD0, 0x44, 0xAE, 0xE8, 0x5F, 0x84, 0xA5, 0xDC, 0xBB, 0x28, 0x4B, 0x39,
    0x77, 0x51, 0x96, 0x72, 0x8B, 0xB4, 0x94, 0x2B, 0x16, 0x69, 0x29, 0x57, 0x2D, 0xD2, 0x52, 0xAE,
    0xEF, 0xA2, 0x2C, 0xE5, 0xDB, 0x65, 0x59, 0x4A, 0xB7, 0xCB, 0xB2, 0x94, 0x6A, 0xB7, 0x65, 0xA9,
    0xA5, 0xBD, 0x96, 0x25, 0x4A, 0x7B, 0x2D, 0x4B, 0x95, 0xF6, 0x5A, 0x96, 0x2F, 0xCD, 0xB5, 0xAC,
    0x5B, 0xBA, 0x6B, 0xD9, 0xB3, 0x54, 0xD7, 0x32, 0xD0, 0x4E, 0xCB, 0xD2, 0x67, 0xA9, 0xAE, 0x65,
    0xCE, 0x52, 0x5D, 0xCB, 0x30, 0x0B, 0x75, 0x2D, 0x98, 0x85, 0xBA, 0x16, 0x60, 0x16, 0xEA, 0x5A,
    0xC0, 0x2C, 0xD4, 0xB5, 0x0E, 0xD3, 0x50, 0x57, 0x1D, 0xA6, 0xA1, 0xAE, 0x3E, 0x6C, 0x43, 0xDD,
    0x79, 0xF8, 0x86, 0x3A, 0xF2, 0xF0, 0x0D, 0x75, 0xE5, 0xE1, 0x1B, 0xEA, 0xCF, 0xE3, 0x37, 0x54,
    0x85, 0x79, 0xA8, 0xEB, 0x74, 0x7E, 0xBF, 0x21, 0xE8, 0xFC, 0x7E, 0x43, 0x9E, 0xC7, 0x6F, 0xA8,
    0x38, 0xAF, 0xDF, 0xD0, 0xD1, 0xF9, 0xFD, 0x86, 0xA7, 0xD3, 0xFB, 0x8D, 0x4A, 0x87, 0xF7, 0x9B
]

dump42 = [
    0x49, 0x13, 0x4D, 0x9B, 0x92, 0x26, 0x9A, 0x36, 0xA4, 0x89, 0xA6, 0xCD, 0x48, 0x9A, 0x68, 0xDA,
    0x90, 0x34, 0xD1, 0xB4, 0x21, 0x69, 0xA2, 0x69, 0x43, 0xD2, 0x44, 0xD3, 0x24, 0x4D, 0x34, 0x6D,
    0x86, 0xA4, 0x89, 0xA6, 0x0D, 0x49, 0x13, 0x4D, 0x1A, 0x92, 0x26, 0x9A, 0x6B, 0x48, 0x9A, 0x68,
    0x35, 0x24, 0x4D, 0x34, 0xD7, 0x90, 0x34, 0xD1, 0xAE, 0x21, 0x69, 0xA2, 0xBA, 0x86, 0xA4, 0x89,
    0x5D, 0x43, 0xD2, 0x44, 0x75, 0x0D, 0x49, 0x13, 0xEA, 0x1A, 0x92, 0x26, 0xD5, 0x35, 0x24, 0x4D,
    0xAA, 0x6B, 0x48, 0x9A, 0x54, 0xD7, 0x90, 0x34, 0xA9, 0xAE, 0x21, 0x69, 0x52, 0x5D, 0x43, 0xD2,
    0xA5, 0xBA, 0x86, 0xA4, 0x4B, 0x75, 0x0D, 0x49, 0x96, 0xEA, 0x1A, 0x92, 0x2C, 0xD5, 0x35, 0x24,
    0x58, 0xAA, 0x6B, 0x48, 0xB1, 0x54, 0xD7, 0x90, 0x62, 0xA9, 0xAE, 0x21, 0xC4, 0x52, 0x5D, 0x43,
    0x89, 0xA5, 0xBA, 0x86, 0x24, 0x96, 0xEA, 0x1A, 0x12, 0x4B, 0x75, 0x0D, 0x48, 0x2C, 0xD5, 0x35,
    0x90, 0x58, 0xAA, 0x6B, 0x20, 0xB1, 0x54, 0xD7, 0x81, 0xC4, 0x52, 0x5D, 0x02, 0x89, 0xA5, 0xBA,
    0x40, 0x62, 0xA9, 0xAE, 0x0A, 0x24, 0x96, 0xEA, 0x05, 0x12, 0x4B, 0x75, 0x2A, 0x90, 0x58, 0xAA,
    0x55, 0x20, 0xB1, 0x54, 0xAA, 0x40, 0x62, 0xA9, 0x54, 0x81, 0xC4, 0x52, 0x15, 0x48, 0x2C, 0xD5,
    0xA9, 0x02, 0x89, 0xA5, 0x53, 0x05, 0x12, 0x4B, 0xA7, 0x0A, 0x24, 0x96, 0x4E, 0x15, 0x48, 0x2C,
    0x9D, 0x2A, 0x90, 0x58, 0x3A, 0x55, 0x20, 0xB1, 0x75, 0xAA, 0x40, 0x62, 0xEA, 0x54, 0x81, 0xC4,
    0xAB, 0x4E, 0x15, 0x48, 0x56, 0x9D, 0x2A, 0x90, 0xAC, 0x3A, 0x55, 0x20, 0xD5, 0xA9, 0x02, 0x89,
    0xAA, 0x53, 0x05, 0x12, 0x55, 0xA7, 0x0A, 0x24, 0xB3, 0xEA, 0x54, 0x81, 0x59, 0x75, 0xAA, 0x40
]

dump43 = [
    0x35, 0xEF, 0xCF, 0x0B, 0x6B, 0xDE, 0x9F, 0x17, 0x98, 0xE7, 0xE7, 0xC5, 0xAC, 0x79, 0x7F, 0x5E,
    0x59, 0xF3, 0xFE, 0xBC, 0xB7, 0xC6, 0xFD, 0xF9, 0x6A, 0xAD, 0xFB, 0x73, 0xD6, 0xBC, 0x3F, 0x2F,
    0xD5, 0x5A, 0xF7, 0xE7, 0xAF, 0x95, 0xEE, 0x4F, 0x5E, 0x2B, 0xDD, 0x9F, 0x76, 0xCD, 0x74, 0xFF,
    0xB9, 0x76, 0xBA, 0xBF, 0xE8, 0xBA, 0xE9, 0x7E, 0xD1, 0x75, 0xD3, 0xFD, 0x4E, 0x97, 0x4D, 0xF7,
    0xA7, 0xCB, 0xA6, 0x7B, 0x99, 0x0E, 0x9B, 0x6E, 0x32, 0x1D, 0x36, 0xDD, 0x60, 0x1A, 0x6C, 0x3A,
    0xC0, 0x34, 0xD8, 0x74, 0x81, 0x69, 0xB0, 0xE9, 0x06, 0xF3, 0x60, 0x53, 0x0C, 0xE6, 0xC1, 0xA6,
    0x1D, 0xEC, 0x83, 0xCD, 0x3F, 0xF8, 0x07, 0x1B, 0x7E, 0xF0, 0x0F, 0x36, 0xFD, 0xE0, 0x1F, 0x6C,
    0xFA, 0xC1, 0x3F, 0xD8, 0xF0, 0xA3, 0x7F, 0x30, 0xE1, 0x47, 0xFF, 0x60, 0xC2, 0x8F, 0xFE, 0xC1,
    0x80, 0x3F, 0xFD, 0x03, 0x02, 0xFE, 0xF4, 0x0F, 0x01, 0x7F, 0xFA, 0x07, 0x04, 0xFC, 0xE9, 0x1F,
    0x08, 0xF8, 0xD3, 0x3F, 0x10, 0xF0, 0xA7, 0x7F, 0x47, 0xE0, 0x9F, 0x7E, 0x8E, 0xC0, 0x3F, 0xFD,
    0x21, 0xE0, 0x4F, 0xFF, 0x32, 0x42, 0xFF, 0xF4, 0x19, 0xA1, 0x7F, 0x7A, 0xC3, 0x48, 0xFD, 0xD3,
    0x83, 0xB1, 0xFA, 0x27, 0x06, 0x63, 0xF5, 0x4F, 0x0D, 0xC6, 0xEA, 0x9F, 0x61, 0xA4, 0xFE, 0x69,
    0x1E, 0xAC, 0xD5, 0xBF, 0x39, 0x78, 0xAB, 0xFF, 0x76, 0xD0, 0x56, 0x7F, 0xED, 0xA0, 0xAD, 0xFE,
    0xDE, 0x61, 0x5B, 0x7D, 0xBC, 0xC3, 0xB6, 0xFA, 0x7D, 0xA7, 0x6D, 0x75, 0xFA, 0x4E, 0xDB, 0xEA,
    0x80, 0x8F, 0xB5, 0x2D, 0x00, 0x1F, 0x6B, 0x5B, 0x01, 0x3E, 0xD6, 0xB6, 0xF1, 0xBD, 0xB6, 0x55,
    0xE3, 0x7B, 0x6D, 0xAB, 0xC2, 0xD7, 0xDA, 0xD6, 0x08, 0x98, 0x58, 0x5B, 0x06, 0x5C, 0xAC, 0xED
]

DAT_001043a0 = bytes(dump43)
DAT_001042a0 = bytes(dump42)
DAT_001041a0 = bytes(dump41)
DAT_001040a0 = bytes(dump40)


def reverse_username(username):
    return username[::-1]


def custom_md5(username):
    modified_name = reverse_username(username)
    md5_hash = hashlib.md5(modified_name.encode()).digest()
    return md5_hash


def popcount(x):
    return bin(x).count('1')


def apply_bit_ops(md5_hash, table1, table2):
    uVar6 = 0
    uVar2 = 0

    # Проверяем, что таблицы имеют достаточную длину (минимум 256 байт)
    if len(table1) < 0x100 or len(table2) < 0x100:
        raise ValueError("Таблицы должны содержать не менее 256 байт")
    # Проверяем, что md5_hash имеет достаточную длину (минимум 8 байт)
    if len(md5_hash) < 8:
        raise ValueError("MD5 хэш должен содержать не менее 8 байт")


    for i in range(0, 0x80, 4):
       chunk1 = struct.unpack("<I", table1[i:i + 4])[0]
       chunk2 = struct.unpack("<I", table2[i:i + 4])[0]

       bits1 = popcount(chunk1 & int.from_bytes(md5_hash[:4], 'little'))
       bits2 = popcount(chunk2 & int.from_bytes(md5_hash[4:8], 'little'))

       uVar6 = (uVar6 << 1) ^ ((bits1 ^ bits2) & 1)

    for i in range(0x80, 0x100, 4):
       chunk1 = struct.unpack("<I", table1[i:i + 4])[0]
       chunk2 = struct.unpack("<I", table2[i:i + 4])[0]

       bits1 = popcount(chunk1 & int.from_bytes(md5_hash[:4], 'little')) # В оригинальном коде здесь md5_hash[:4]
       bits2 = popcount(chunk2 & int.from_bytes(md5_hash[4:8], 'little')) # В оригинальном коде здесь md5_hash[4:8]

       uVar2 = (uVar2 << 1) ^ ((bits1 ^ bits2) & 1)

    return uVar6 & 0xFFFF, uVar2 & 0xFFFF


def generate_serial(username):
    md5_hash = custom_md5(username)

    part1, _ = apply_bit_ops(md5_hash, DAT_001043a0, DAT_001042a0)
    part2, _ = apply_bit_ops(md5_hash, DAT_001041a0, DAT_001040a0)
    part3 = (part1 ^ part2) & 0xFFFF  # Контрольная сумма

    return f"{part1:04X}-{part2:04X}-{part3:04X}"


username = "admin"
serial = generate_serial(username)
print(f"Сгенерированный серийный номер для '{username}': {serial}")

username_test = "testuser"
serial_test = generate_serial(username_test)
print(f"Сгенерированный серийный номер для '{username_test}': {serial_test}")

username_long = "averylongusernameexample"
serial_long = generate_serial(username_long)
print(f"Сгенерированный серийный номер для '{username_long}': {serial_long}")
